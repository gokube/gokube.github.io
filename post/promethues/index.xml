<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>post/promethues_index on Gokube</title>
    <link>https://gokube.github.io/post/promethues/</link>
    <description>Recent content in post/promethues_index on Gokube</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <lastBuildDate>Sun, 17 Nov 2019 23:09:01 +0800</lastBuildDate>
    
	<atom:link href="https://gokube.github.io/post/promethues/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>promethues01</title>
      <link>https://gokube.github.io/2019/11/17/promethues01/</link>
      <pubDate>Sun, 17 Nov 2019 22:57:47 +0800</pubDate>
      
      <guid>https://gokube.github.io/2019/11/17/promethues01/</guid>
      <description> intr 指标监控软件 golang开发
 学习地址 https://www.ibm.com/developerworks/cn/cloud/library/cl-lo-prometheus-getting-started-and-practice/index.html
 架构图  Prometheus 生态圈中包含了多个组件，其中许多组件是可选的：
Prometheus Server: 用于收集和存储时间序列数据。
Client Library: 客户端库，为需要监控的服务生成相应的 metrics 并暴露给 Prometheus server。当 Prometheus server 来 pull 时，直接返回实时状态的 metrics。
Push Gateway: 主要用于短期的 jobs。由于这类 jobs 存在时间较短，可能在 Prometheus 来 pull 之前就消失了。为此，这次 jobs 可以直接向 Prometheus server 端推送它们的 metrics。这种方式主要用于服务层面的 metrics，对于机器层面的 metrices，需要使用 node exporter。
Exporters: 用于暴露已有的第三方服务的 metrics 给 Prometheus。
Alertmanager: 从 Prometheus server 端接收到 alerts 后，会进行去除重复数据，分组，并路由到对收的接受方式，发出报警。常见的接收方式有：电子邮件，pagerduty，OpsGenie, webhook 等。
一些其他的工具。
  </description>
    </item>
    
  </channel>
</rss>